// Package handlers provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package handlers

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get currencies
	// (GET /v1/currencies)
	GetV1Currencies(c *gin.Context, params GetV1CurrenciesParams)
	// Get quote
	// (GET /v1/quote)
	GetV1Quote(c *gin.Context, params GetV1QuoteParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetV1Currencies operation middleware
func (siw *ServerInterfaceWrapper) GetV1Currencies(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1CurrenciesParams

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", c.Request.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter name: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "popular" -------------

	err = runtime.BindQueryParameter("form", true, false, "popular", c.Request.URL.Query(), &params.Popular)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter popular: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "active" -------------

	err = runtime.BindQueryParameter("form", true, false, "active", c.Request.URL.Query(), &params.Active)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter active: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "symbols" -------------

	err = runtime.BindQueryParameter("form", true, false, "symbols", c.Request.URL.Query(), &params.Symbols)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter symbols: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetV1Currencies(c, params)
}

// GetV1Quote operation middleware
func (siw *ServerInterfaceWrapper) GetV1Quote(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1QuoteParams

	// ------------- Required query parameter "from" -------------

	if paramValue := c.Query("from"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument from is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "from", c.Request.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter from: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "to" -------------

	if paramValue := c.Query("to"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument to is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "to", c.Request.URL.Query(), &params.To)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter to: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "amount" -------------

	if paramValue := c.Query("amount"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument amount is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "amount", c.Request.URL.Query(), &params.Amount)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter amount: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetV1Quote(c, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, siAny any, optionsAny any) {
	si := siAny.(ServerInterface)
	options := optionsAny.(GinServerOptions)

	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/v1/currencies", wrapper.GetV1Currencies)

	router.GET(options.BaseURL+"/v1/quote", wrapper.GetV1Quote)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/6RUSU/jTBD9K1F/39FjOzAH5NMgpBmh0bAIxAVxqLQrSTPuJdXtIAvlv4+6vQY7BMTN",
	"7qp6tb16r4xrabRC5SzLXpnla5QQPi9KIlS88t+GtEFyAoMF8pzQ2gcoRA5OaOUfXWWQZcw6EmrFdhGD",
	"LYgCFgUOrAutCwTlzULCCicDFcgDBnQvmv6GGoRDGT7+J1yyjP2X9I0kTRfJVR3gYxswIILK/xsSPGRZ",
	"apLgWMZyXfpiO1dVygWS97WVXOhioqRdxAg3pSDMWfZYF965ty0OJ9HmjSZmOOjvqStCL56RO19E28to",
	"GwfGNVXbFO5tqR1O7FjqUrkPDmhJWk5uzOnjlYXg4Bq1Wcd1+iChlgGOa+WAh9pQgihY1j79sMKstYrt",
	"CxjWEondhcfZXf1Ykg9YO2dsliTDgF3EcrSchKk53QZ64+z85pJFrBAclcV+7OzP5f0IVBtUVpfEMda0",
	"Spogm3hfPxThChzDz77Nrg0q/3UapyxiWyRbFzKP0zj1oR4ZjGAZO43T+LvnE7h1WFiynSe8PtlmhSsM",
	"M9rv6Re62cAtQFIg4GVemx/mF0O7AQKJDsmy7PEt2hVInOnlzK2xRa088b1tUyJV/Rba4winOcmKt+A3",
	"2pQF0H65U9CmdpxC7wRnDH/OndjicXQIfp8EvwsacAjSdtYesxO08RHtSdfuyZ+PNdpTyvufpGl7FVhf",
	"LBhTCB6WmjzbWp4nEr2nnJ34j/OPzuT6d7hpW0oJVI055o2enZtWaQ4Ss/aY5ORtY3qXjj9Jy2M8bOSm",
	"VyBHJX6Kl/f6WI6gZV/IcF7L4AE+tsbDCY5K9pdJ9B536lV9lCib3tsibdvF9oqaJUmhORRrbV12lp6l",
	"yXbO/Mz2RReMiAdq/kGnE+ZH4WA1Rac9HWymP+T10+5fAAAA//9ReY7NPwkAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
