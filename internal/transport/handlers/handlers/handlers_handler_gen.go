// Package handlers provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package handlers

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get currencies
	// (GET /v1/currencies)
	GetV1Currencies(c *gin.Context, params GetV1CurrenciesParams)
	// Get quote
	// (GET /v1/quotes)
	GetV1Quotes(c *gin.Context, params GetV1QuotesParams)
	// Create swap
	// (POST /v1/swaps)
	PostV1Swaps(c *gin.Context)
	// Get swap
	// (GET /v1/swaps/{id})
	GetV1SwapsId(c *gin.Context, id string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetV1Currencies operation middleware
func (siw *ServerInterfaceWrapper) GetV1Currencies(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1CurrenciesParams

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", c.Request.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter name: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "popular" -------------

	err = runtime.BindQueryParameter("form", true, false, "popular", c.Request.URL.Query(), &params.Popular)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter popular: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "active" -------------

	err = runtime.BindQueryParameter("form", true, false, "active", c.Request.URL.Query(), &params.Active)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter active: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "symbols" -------------

	err = runtime.BindQueryParameter("form", true, false, "symbols", c.Request.URL.Query(), &params.Symbols)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter symbols: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetV1Currencies(c, params)
}

// GetV1Quotes operation middleware
func (siw *ServerInterfaceWrapper) GetV1Quotes(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1QuotesParams

	// ------------- Required query parameter "fromSymbol" -------------

	if paramValue := c.Query("fromSymbol"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument fromSymbol is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "fromSymbol", c.Request.URL.Query(), &params.FromSymbol)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter fromSymbol: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "fromNetwork" -------------

	if paramValue := c.Query("fromNetwork"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument fromNetwork is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "fromNetwork", c.Request.URL.Query(), &params.FromNetwork)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter fromNetwork: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "toSymbol" -------------

	if paramValue := c.Query("toSymbol"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument toSymbol is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "toSymbol", c.Request.URL.Query(), &params.ToSymbol)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter toSymbol: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "toNetwork" -------------

	if paramValue := c.Query("toNetwork"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument toNetwork is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "toNetwork", c.Request.URL.Query(), &params.ToNetwork)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter toNetwork: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "amount" -------------

	if paramValue := c.Query("amount"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument amount is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "amount", c.Request.URL.Query(), &params.Amount)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter amount: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetV1Quotes(c, params)
}

// PostV1Swaps operation middleware
func (siw *ServerInterfaceWrapper) PostV1Swaps(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostV1Swaps(c)
}

// GetV1SwapsId operation middleware
func (siw *ServerInterfaceWrapper) GetV1SwapsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetV1SwapsId(c, id)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si any) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, siAny any, optionsAny any) {
	si := siAny.(ServerInterface)
	options := optionsAny.(GinServerOptions)

	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/v1/currencies", wrapper.GetV1Currencies)

	router.GET(options.BaseURL+"/v1/quotes", wrapper.GetV1Quotes)

	router.POST(options.BaseURL+"/v1/swaps", wrapper.PostV1Swaps)

	router.GET(options.BaseURL+"/v1/swaps/:id", wrapper.GetV1SwapsId)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RXS2/jNhD+KwK7tzqW002BrU7Npt3CKJrN1kEuQQrQ0tjmVnyYpLxVA//3YijrTfnR",
	"dXLZm60ZzvOb4cdnEkuupABhDYmeiYlXwKn7eZNpDSLO8bfSUoG2DJyEJokGYx5oyhJqmRT40eYKSESM",
	"1UwsyXZE6IaylM5TaEjnUqZABYoZp0vwHhSUDwjAfpH6bxcDs8DdjzcaFiQi34V1IuEui/C2OIBnd8ao",
	"1jTH/0qz2HlZSM2pJRFJZIbBVqoi43PQqGtyPpepJ6TtiGhYZ0xDQqLHIvBKvUyxWYnS78hTw0Z+T1UQ",
	"cv4ZYotB/Kq11P1ecDDGX8hOcKWiz3ZZp571gVb48t5j944yT+Sidrqvh7Oimq02HKPfibFqSunWF++n",
	"TFrw4J3LTNgjwZKwxQJwcI5FF/wTr6gYmIWFlvxIlLsqI9LlSQc6dXIOnZFRmXcjxFZ6vgrOvlDVL2Cs",
	"gVpIrjs1pBYuLOONqtSJn7sqLPFaUjRn4vqU/iqay8xeF+M7ZBM1TjGqgZqBNaphkYlknz9jqc38ohOx",
	"gAf2ecpUclofO+BiCanCHTVQ0bQ8akGw2Z9mdC1M7qrX7U2nE91SDsH3T1hnYOxpa4AzwXjGSTR5hQk/",
	"DImz9v2YDdEOaaBT3opXS11Ra0ELEpG/HunFv5OLn56+f+OBFA6zWLgEYyksjV1LgFOWkqj89LNhaiXF",
	"2OA+KikFmbmPwaz4mGk8sLJWmSgMmwdwjYOJNVMFuykPojC4vpuSEUlZDMJAfUmSP6b3PaNSgTAy0zGM",
	"pV6Gu0MmRF2sOrMp9M0HF8FHBQJ/vR1PyIhsQJsikMvxZDzBo2iZKkYi8nY8GV85sNuVa1+4uQzjgrzt",
	"kLsEV6N2Tr+BDRpqzqR2VGSaFOKHy5umXFFNOVjQhkSPXWu3lEMgF4FdQWk1RwqEsnUGOq+7UNIkh8Tj",
	"r/OuxzupspTqdg4+f6pQbLns8tG++evYsg0ctk6d3onGi6yGTJpKWtus+G5/1lvMdvuEw2iURJyh/g+T",
	"STkqUGwvqlTKYtfp8PPu2vE42teV6m3Q99+bnY+/o9aPJ4axz3tBhT2u3tMkKNc3Sk3GOdV5H+woxDFZ",
	"I+HbPyJOxT8dn4rTBybjg5b80EjgTp2VDLVetlZn8PWD4gIoae+w/9tK49wB3MtD+Vv5YtnfywO5W/ly",
	"mVfUw7s56stzyOtJRON1Rr94I20HB/3q1Qf9lZbLVCA9oWkwA70BHZSK3TWz3hWo2DB4p7uaKmk8G+bG",
	"ceBgR1PaO+ZOGvtwOXMGCpCAse9lkp8t1ybd3bZ5HiJx28PT5Vld+6pcFCT55pHUBEYLS+EzS7Z7bywv",
	"mNyF5bA0TQ7dWKgWTH8p1xYSy3pruTfc8MbqsvWv3Un/B0PlIrp6+VbeSht8kJlIPIvAVOEZ1+ei1PUD",
	"IQrDVMY0XUljo3eTd8jrnzsPCKrYuPUywTcUXfq61uLqu2Y1Kc/T9r8AAAD//3BaHPHtFQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
